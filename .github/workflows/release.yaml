name: Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'CHANGELOG.md'

permissions:
  contents: write
  pull-requests: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      pr: ${{ steps.release.outputs.pr }}
      pr_number: ${{ steps.release.outputs.pr && fromJson(steps.release.outputs.pr).number || '' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          release-type: go
          package-name: gommit
          fork: false
          default-branch: main
          # Enable Release Please's built-in auto-merge
          target-branch: main
          pull-request-title-pattern: "chore: release ${version}"
          bootstrap-sha: da78aed2b56c894c1d2066bce35c68bab87b6384  # Use your initial commit SHA
          release-labels: "autorelease: pending,automerge"  # Add automerge label
          extra-files: |
            README.md

  # Build job that runs only when release-please creates a PR
  build:
    needs: [release-please]
    if: needs.release-please.outputs.pr
    strategy:
      matrix:
        bin: [gommit]
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Build binary
        run: |
          OUTPUT_NAME="${{ matrix.bin }}-${{ matrix.os }}-${{ matrix.arch }}"
          if [ "${{ matrix.os }}" = "windows" ]; then
            OUTPUT_NAME="${OUTPUT_NAME}.exe"
          fi
          cd ${{ matrix.bin }}
          mkdir -p ../dist
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -o ../dist/$OUTPUT_NAME

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.bin }}-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/*

  # Add artifacts to the release after PR is merged
  upload-artifacts:
    needs: [release-please, build]
    if: needs.release-please.outputs.release_created
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: "*"
          merge-multiple: true

      - name: Upload artifacts to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the tag name from the latest release
          TAG=$(gh release list -L 1 | cut -f 1)
          
          # Upload each artifact to the release
          for file in dist/*; do
            gh release upload "$TAG" "$file"
          done