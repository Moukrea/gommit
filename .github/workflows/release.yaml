name: Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'CHANGELOG.md'

permissions:
  contents: write
  pull-requests: write

jobs:
  release-please:
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      pr: ${{ steps.release.outputs.pr }}
      pr_number: ${{ steps.release.outputs.pr && fromJson(steps.release.outputs.pr).number || '' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: googleapis/release-please-action@v4
        id: release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          release-type: go
          package-name: gommit

  merge-release:
    needs: [release-please]
    if: needs.release-please.outputs.pr != ''
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Merge Release PR
        env:
          GITHUB_TOKEN: ${{ secrets.CUSTOM_GH_TOKEN }}
          PR_NUMBER: ${{ fromJson(needs.release-please.outputs.pr).number }}
        run: |
          # Approve PR
          gh api \
            --method POST \
            -H "Accept: application/vnd.github.v3+json" \
            /repos/${{ github.repository }}/pulls/$PR_NUMBER/reviews \
            -f event='APPROVE'

          # Merge PR
          gh api \
            --method PUT \
            -H "Accept: application/vnd.github.v3+json" \
            /repos/${{ github.repository }}/pulls/$PR_NUMBER/merge \
            -f merge_method='merge'

          # Add the force-run label
          gh api \
            --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/issues/$PR_NUMBER/labels \
            -f "labels[]"="release-please:force-run"

          # Trigger a new workflow run
          gh workflow run release-please.yml --ref main

  build:
    needs: [release-please]
    if: needs.release-please.outputs.release_created == 'true'
    strategy:
      matrix:
        bin: [gommit]
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Build binary
        run: |
          OUTPUT_NAME="${{ matrix.bin }}-${{ matrix.os }}-${{ matrix.arch }}"
          if [ "${{ matrix.os }}" = "windows" ]; then
            OUTPUT_NAME="${OUTPUT_NAME}.exe"
          fi
          cd ${{ matrix.bin }}
          mkdir -p ../dist
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -o ../dist/$OUTPUT_NAME

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.bin }}-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/*

  upload-artifacts:
    needs: [release-please, build]
    if: needs.release-please.outputs.release_created == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: "*"
          merge-multiple: true

      - name: Upload artifacts to release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the tag name from the latest release
          TAG=$(gh release list -L 1 | cut -f 1)
          
          # Upload each artifact to the release
          for file in dist/*; do
            gh release upload "$TAG" "$file"
          done