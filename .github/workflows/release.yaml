name: Release

on:
  workflow_run:
    workflows: ["Quality"]
    types:
      - completed
    branches:
      - main

jobs:
  check_version:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    name: Check Version
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check_bump.outputs.should_release }}
      new_version: ${{ steps.check_bump.outputs.new_version }}
    steps:
      - name: Set up Node.js and semver
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install semver
        run: npm install -g semver

      - name: Install git-cliff
        uses: kenji-miyake/setup-git-cliff@v2

      - name: Check for version bump
        id: check_bump
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "0.0.0")
          NEW_VERSION=$(git cliff --bumped-version)
          if [ "$(semver -r ">$LATEST_TAG" "$NEW_VERSION")" = "$NEW_VERSION" ]; then
            echo "Version bump needed: $LATEST_TAG -> $NEW_VERSION"
            echo "should_release=true" >> "$GITHUB_OUTPUT"
            echo "new_version=$NEW_VERSION" >> "$GITHUB_OUTPUT"
          else
            echo "No version bump needed (staying at $LATEST_TAG)"
            echo "should_release=false" >> "$GITHUB_OUTPUT"
          fi

  prepare_release:
    needs: check_version
    if: needs.check_version.outputs.should_release == 'true'
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      new_version: ${{ needs.check_version.outputs.new_version }}
      release_notes: ${{ steps.release_notes.outputs.content }}
    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install git-cliff
        uses: kenji-miyake/setup-git-cliff@v2

      - name: Generate release notes
        id: release_notes
        run: |
          # Generate release notes for this version
          git cliff --unreleased --bump -o RELEASE_NOTES.md
          
          # Update CHANGELOG.md
          git cliff --unreleased --bump --prepend CHANGELOG.md
          
          # Capture release notes content
          CONTENT=$(cat RELEASE_NOTES.md)
          echo "content<<EOF" >> "$GITHUB_OUTPUT"
          echo "$CONTENT" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"

          # Add to job summary
          echo "# Release notes for v${{ needs.check_version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY  # Empty line
          cat RELEASE_NOTES.md >> $GITHUB_STEP_SUMMARY

      - name: Commit and push changelog
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add CHANGELOG.md
          git commit -m "chore(release): update changelog for version ${{ needs.check_version.outputs.new_version }}"
          git push "https://${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git" HEAD:main

  build:
    name: Build
    needs: [check_version, prepare_release]
    if: needs.check_version.outputs.should_release == 'true'
    strategy:
      matrix:
        bin: [gommit]
        os: [linux, darwin, windows]
        arch: [amd64, arm64]
    runs-on: ubuntu-latest
    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build binary
        run: |
          OUTPUT_NAME="${{ matrix.bin }}-${{ matrix.os }}-${{ matrix.arch }}"
          if [ "${{ matrix.os }}" = "windows" ]; then
            OUTPUT_NAME="${OUTPUT_NAME}.exe"
          fi
          cd ${{ matrix.bin }}
          mkdir -p ../dist
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -ldflags="-X 'main.version=${{ needs.check_version.outputs.new_version }}'" -o ../dist/$OUTPUT_NAME
          cd ..

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.bin }}-${{ matrix.os }}-${{ matrix.arch }}
          path: dist/*

  release:
    name: Release
    needs: [check_version, prepare_release, build]
    if: needs.check_version.outputs.should_release == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: "*"
          merge-multiple: true

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.check_version.outputs.new_version }}
          name: Release ${{ needs.check_version.outputs.new_version }}
          body: ${{ needs.prepare_release.outputs.release_notes }}
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}