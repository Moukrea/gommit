# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[changelog]
header = """
# Changelog

All notable changes to this project will be documented in this file. See [standard-version](https://github.com/conventional-changelog/standard-version) for commit guidelines.\n
"""

body = """
{% if version %}\
    {% if previous.version %}\
        ## [{{ version | trim_start_matches(pat="v") }}]($REPO/compare/{{ previous.version }}...{{ version }}) ({{ timestamp | date(format="%Y-%m-%d") }})
    {% else %}\
        ## {{ version | trim_start_matches(pat="v") }} ({{ timestamp | date(format="%Y-%m-%d") }})
    {% endif %}\
{% else %}\
    ## [unreleased]
{% endif %}

{% for group, commits in commits | group_by(attribute="group") %}
    {% if group == "Features" or group == "Bug Fixes" %}
    ### {{ group | striptags | trim }}
    {% for commit in commits %}
        {% if commit.scope %}
        * **{{ commit.scope }}:** {{ commit.message | split(pat="\n") | first | trim }}\
        {% else %}
        * {{ commit.message | split(pat="\n") | first | trim }}\
        {% endif %}\
        {% if commit.breaking %}
            \n\n  ### âš  BREAKING CHANGES\n\n  * {{ commit.breaking_description }}\
        {% endif %}\
        {% if commit.references | length != 0 %}\
            {% for ref in commit.references %} ([#{{ ref.id }}]($REPO/issues/{{ ref.id }})){% endfor %}\
        {% endif %}\
    {% endfor %}
    {% endif %}
{% endfor %}\n
"""

footer = """
{% for release in releases -%}
    {% if release.version -%}
        {% if release.previous.version -%}
            [{{ release.version | trim_start_matches(pat="v") }}]: $REPO/compare/{{ release.previous.version }}...{{ release.version }}
        {% endif -%}
    {% else -%}
        [unreleased]: $REPO/compare/{{ release.previous.version }}...HEAD
    {% endif -%}
{% endfor %}
<!-- generated by git-cliff -->
"""

trim = true
postprocessors = [
    { pattern = '\$REPO', replace = "https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}" },
]

[git]
conventional_commits = true
filter_unconventional = true
commit_parsers = [
    { message = "^feat", group = "Features" },
    { message = "^fix", group = "Bug Fixes" },
    { message = "^chore", skip = true },
    { message = "^docs", skip = true },
    { message = "^style", skip = true },
    { message = "^refactor", skip = true },
    { message = "^perf", skip = true },
    { message = "^test", skip = true }
]

filter_commits = false
topo_order = false
sort_commits = "oldest"